name: Pre-commit

on:
  workflow_call:
    inputs:
      python_version:
        type: string
        default: "3.12"
        required: false
        description: "Python version to use"
      pre_commit_version:
        type: string
        default: "latest"
        required: false
        description: "Pre-commit version to use"
      pre_commit_hooks:
        type: string
        default: "all"
        required: false
        description: "Hooks to run, seperated by commas"
      pre_commit_config_path:
        type: string
        default: ".pre-commit-config.yaml"
        required: false
        description: "Path to the pre-commit config file"

  workflow_dispatch:
    inputs:
      python_version:
        type: string
        default: "3.12"
        required: false
        description: "Python version to use"
      pre_commit_version:
        type: string
        default: "latest"
        required: false
        description: "Pre-commit version to use"
      pre_commit_hooks:
        type: string
        default: "all"
        required: false
        description: "Hooks to run, seperated by commas"
      pre_commit_config_path:
        type: string
        default: ".pre-commit-config.yaml"
        required: false
        description: "Path to the pre-commit config file"

env:
  REQUIREMENTS_PATH: pre-commit-requirements.txt
  CACHE_PATH: ~/.cache/pre-commit

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Create requirements.txt
      run: |
        if [ ${{ inputs.pre_commit_version }} == "latest" ]; then
          echo "pre-commit" > $REQUIREMENTS_PATH
        else
          echo "pre-commit==${{ inputs.pre_commit_version }}" > $REQUIREMENTS_PATH
        fi

    - uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_version }}
        cache: "pip"
        cache-dependency-path: ${{ env.REQUIREMENTS_PATH }}

    - name: Install pre-commit
      id: install-pre-commit
      run: |
        # Install requirements file
        pip install -r $REQUIREMENTS_PATH

        # Output pre-commit version ("pre-commit 1.2.3" -> "1.2.3")
        python -c '
        import subprocess, sys
        version = subprocess.run(["pre-commit", "--version"], capture_output=True, text=True).stdout.split(" ")[1]
        subprocess.run(["echo", "VERSION=" + version, ">>", "$GITHUB_OUTPUT"], check=True)
        '

    - name: Cache pre-commit
      uses: actions/cache@v4
      with:
        key: pre-commit-${{ inputs.python_version }}-${{ steps.install-pre-commit.outputs.VERSION }}-${{ hashFiles(inputs.pre_commit_config_path) }}
        path: ~/.cache/pre-commit

    - name: Run pre-commit text formatters if any files changed exit error
      run: |
        python -c '
        import subprocess, sys

        hooks = "${{ inputs.pre_commit_hooks }}"
        config = "${{ inputs.pre_commit_config_path }}"
        base_cmd = ["pre-commit", "run", "--show-diff-on-failure", "--all-files", "--config", config]

        if hooks == "all":
            print("Running all hooks")
            sys.exit(subprocess.run(base_cmd).returncode)

        for hook in hooks.split(","):
            cmd = base_cmd + ["--hook-stage", hook.strip()]
            print("Running hook: " + hook.strip())
            result = subprocess.run(cmd)
            if result.returncode != 0:
                sys.exit(result.returncode)
        '
